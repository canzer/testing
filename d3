<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>D3.js Force-Directed Graph</title>

    <!-- Include D3.js from a CDN -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
</head>
<body>

    <!-- Container for the graph -->
    <svg id="forceGraph" width="600" height="400"></svg>

    <!-- Your JavaScript code to create the graph -->
    <script>
        // Sample data
        var data = [
            {
                "inbound_server": { "name": "Server1" },
                "outbound_servers": [
                    { "name": "Server2" },
                    { "name": "Server3" },
                    { "name": "Server4" }
                ]
            },
            {
                "inbound_server": { "name": "Server4" },
                "outbound_servers": [
                    { "name": "Server5" },
                    { "name": "Server6" },
                    { "name": "Server2" }
                ]
            }
        ];

        // Extract unique nodes based on server names
        var nodesSet = new Set();
        data.forEach(function(d) {
            nodesSet.add(d.inbound_server.name);
            d.outbound_servers.forEach(function(outbound) {
                nodesSet.add(outbound.name);
            });
        });

        var nodes = Array.from(nodesSet, function(name) {
            return { name: name };
        });

        // Create links array
        var links = data.flatMap(d => d.outbound_servers.map(outbound => ({
            source: nodes.find(node => node.name === d.inbound_server.name),
            target: nodes.find(node => node.name === outbound.name),
            label: "outbound"
        })));

        // Calculate initial positions based on a pyramid layout
        var numNodes = nodes.length;
        var pyramidWidth = 200;
        nodes.forEach(function(node, index) {
            node.x = pyramidWidth * (index % 2) + (index % 2 === 0 ? 0 : pyramidWidth);
            node.y = 100 + 100 * Math.floor(index / 2);
        });

        // Create SVG container
        var svg = d3.select("#forceGraph")
            .attr("width", 600)
            .attr("height", 400);

        // Create force simulation
        var simulation = d3.forceSimulation(nodes)
            .force("link", d3.forceLink(links).id(function(d) { return d.index; }).distance(150))
            .force("charge", d3.forceManyBody().strength(-100))
            .force("center", d3.forceCenter(300, 200));

        // Create links
        var link = svg.append("g")
            .selectAll("line")
            .data(links)
            .enter().append("line")
            .attr("stroke", "black");

        // Create labels for links
        var linkLabel = svg.append("g")
            .selectAll("text")
            .data(links)
            .enter().append("text")
            .text(function(d) { return d.label; })
            .attr("text-anchor", "middle");

        // Create nodes
        var node = svg.append("g")
            .selectAll("circle")
            .data(nodes)
            .enter().append("circle")
            .attr("r", 20)
            .attr("fill", "blue");

        // Create labels for nodes
        var label = svg.append("g")
            .selectAll("text")
            .data(nodes)
            .enter().append("text")
            .text(function(d) { return d.name; })
            .attr("dy", 5)
            .attr("text-anchor", "middle");

        // Update positions on tick
        simulation.on("tick", function() {
            link
                .attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });

            linkLabel
                .attr("x", function(d) { return (d.source.x + d.target.x) / 2; })
                .attr("y", function(d) { return (d.source.y + d.target.y) / 2; });

            node
                .attr("cx", function(d) { return d.x; })
                .attr("cy", function(d) { return d.y; });

            label
                .attr("x", function(d) { return d.x; })
                .attr("y", function(d) { return d.y; });
        });
    </script>
</body>
</html>
