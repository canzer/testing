<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Replication Graph</title>
    <script src="https://d3js.org/d3.v5.min.js"></script>
</head>
<body>
    <div id="graph-container"></div>

    <script>
        // Assume you have the JSON data available in a variable named 'replicationData'
        var replicationData = [
            {
                "inbound_server": {"name": "Server1", "ip": "192.168.1.1"},
                "outbound_server": {"name": "Server2", "ip": "192.168.1.2"}
            },
            // ... (other data entries)
        ];

        var width = 800;
        var height = 600;

        var svg = d3.select("#graph-container")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        var simulation = d3.forceSimulation(replicationData)
            .force("link", d3.forceLink().id(d => d.inbound_server.name).distance(100))
            .force("charge", d3.forceManyBody().strength(-200))
            .force("center", d3.forceCenter(width / 2, height / 2));

        var link = svg.selectAll("line")
            .data(replicationData)
            .enter().append("line")
            .attr("stroke", "#999")
            .attr("stroke-width", "1");

        var node = svg.selectAll("circle")
            .data(replicationData)
            .enter().append("circle")
            .attr("r", 10)
            .attr("fill", "steelblue")
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));

        simulation
            .nodes(replicationData)
            .on("tick", ticked);

        simulation.force("link")
            .links(replicationData);

        function ticked() {
            link
                .attr("x1", d => d.inbound_server.x)
                .attr("y1", d => d.inbound_server.y)
                .attr("x2", d => d.outbound_server.x)
                .attr("y2", d => d.outbound_server.y);

            node
                .attr("cx", d => d.inbound_server.x)
                .attr("cy", d => d.inbound_server.y);
        }

        function dragstarted(event, d) {
            if (!event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
        }

        function dragged(event, d) {
            d.fx = event.x;
            d.fy = event.y;
        }

        function dragended(event, d) {
            if (!event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
        }
    </script>
</body>
</html>
